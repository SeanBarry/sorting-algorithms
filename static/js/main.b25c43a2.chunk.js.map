{"version":3,"sources":["types.ts","App.styles.ts","constants.ts","utils.ts","App.tsx","reportWebVitals.js","index.js"],"names":["SortingAlgorithm","BACKGROUND","PRIMARY","SECONDARY","Div","styled","div","Wrapper","ArrayElement","element","value","colour","ToolBar","ArrayWrapper","Credits","p","Link","a","Button","button","primary","Select","select","SliderWrapper","SliderDescription","Slider","input","Rows","Description","MAX_SPEED","shuffle","array","tempValue","randomIdx","currentIndex","length","Math","floor","random","swap","i","j","temp","ELEMENT_COLOURS","sleep","duration","Promise","resolve","setTimeout","bubbleSort","setArray","speed","isSorted","counter","next","current","setColour","map","w","index","insertionSort","selectionSort","currentIdx","smallestIdx","App","useState","inProgress","setInProgress","arraySize","setArraySize","maxArraySize","setMaxArraySize","sortSpeed","setSortSpeed","BubbleSort","sortingAlgorithm","setSortingAlgorithm","mainContentWidth","useRef","useEffect","offsetWidth","number","shuffleArray","sortArray","SelectionSort","InsertionSort","Array","from","_","shuffled","onChange","event","typedValue","target","disabled","Object","values","val","Number","type","min","max","onClick","href","rel","ref","getAlgorithmDescription","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b25c43a2.chunk.js","sourcesContent":["export enum SortingAlgorithm {\n  BubbleSort = \"Bubble Sort\",\n  InsertionSort = \"Insertion Sort\",\n  SelectionSort = \"Selection Sort\",\n}\n\nexport type ArrayItem = {\n  value: number;\n  isSorted: boolean;\n  inProgress: boolean;\n  colour: string;\n};\n","import { ArrayItem } from \"./types\";\nimport styled from \"styled-components\";\n\nexport const BACKGROUND = \"#fffffe\";\nexport const BACKGROUND_SECONDARY = \"#232946\";\nexport const PRIMARY = \"#3da9fc\";\nexport const SECONDARY = \"#ef4565\";\nexport const TERTIARY = \"#ffc107\";\n\nexport const BAR_WIDTH = 4;\nexport const BAR_SPACE = 4;\n\nconst Div = styled.div`\n  box-sizing: border-box;\n`;\n\nexport const Wrapper = styled(Div)`\n  width: 100%;\n  height: 100%;\n  background-color: ${BACKGROUND};\n  display: flex;\n`;\n\ntype ArrayItemProps = {\n  key: number;\n  element: ArrayItem;\n};\n\nexport const ArrayElement = styled.div<ArrayItemProps>`\n  width: ${BAR_WIDTH}px;\n  margin-left: ${BAR_SPACE}px;\n  color: transparent;\n  display: inline-block;\n  height: ${({ element }) => element.value * 3}px;\n  background-color: ${({ element }) => element.colour};\n`;\n\nexport const ToolBar = styled(Div)`\n  background: ${BACKGROUND_SECONDARY};\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 30px;\n  height: 100%;\n  width: 250px;\n  border-right: 3px solid rgb(9 64 103);\n`;\n\nexport const ArrayWrapper = styled(Div)`\n  padding: 30px;\n  width: 100%;\n  height: 100%;\n  background-color: ${BACKGROUND};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Credits = styled.p`\n  font-family: sans-serif;\n  font-size: 12px;\n  color: #fff;\n`;\n\nexport const Link = styled.a`\n  color: ${SECONDARY};\n  font-weight: bold;\n  text-decoration: none;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: #bc2944;\n  }\n`;\n\nexport const Button = styled.button<{ primary?: boolean }>`\n  background: ${({ primary }) => (primary ? SECONDARY : BACKGROUND)};\n  width: 100%;\n  border: none;\n  padding: 1rem 2rem;\n  margin: 10px 0;\n  text-decoration: none;\n  color: ${({ primary }) => (primary ? \"#fff\" : \"#2b2c34\")};\n  font-family: sans-serif;\n  font-size: 1rem;\n  font-weight: bold;\n  line-height: 1;\n\n  cursor: pointer;\n  text-align: center;\n  transition: background 250ms ease-in-out, transform 150ms ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &:hover {\n    background: ${({ primary }) => (primary ? \"#bc2944\" : \"#cfcfcf\")};\n  }\n`;\n\nexport const Select = styled.select`\n  width: 100%;\n  font-family: sans-serif;\n  font-size: 1rem;\n  font-weight: bold;\n  line-height: 1;\n  padding: 15px 0px;\n  margin: 10px 0px;\n  text-align: center;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const SliderWrapper = styled(Div)`\n  padding: 10px 0px;\n  width: 100%;\n`;\n\nexport const SliderDescription = styled.p`\n  font-family: sans-serif;\n  color: #fffffe;\n  font-size: 1rem;\n  font-weight: bold;\n  line-height: 1;\n  margin: 0px;\n`;\n\nexport const Slider = styled.input`\n  margin: 10px 0;\n  height: 25px;\n  -webkit-transition: 0.2s;\n  transition: opacity 0.2s;\n  -webkit-appearance: none;\n  width: 100%;\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 25px;\n    height: 25px;\n    background: ${SECONDARY};\n    cursor: pointer;\n\n    &:disabled {\n      opacity: 0.7;\n      cursor: not-allowed;\n    }\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    opacity: 0.7;\n    background: white;\n    cursor: not-allowed;\n  }\n`;\n\nexport const Rows = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Description = styled.p`\n  font-size: 16px;\n  font-family: sans-serif;\n  line-height: 1.8;\n  padding: 30px;\n  align-self: flex-start;\n  justify-content: center;\n`;\n","export const MAX_SPEED = 200;\nexport const MAX_ARRAY_SIZE = 100;\n","import { PRIMARY, SECONDARY, TERTIARY } from \"./App.styles\";\n\nimport { ArrayItem } from \"./types\";\nimport { MAX_SPEED } from \"./constants\";\n\nexport const shuffle = (array: Array<any>) => {\n  let currentIndex = array.length;\n  let tempValue;\n  let randomIdx;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIdx = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    tempValue = array[currentIndex];\n    array[currentIndex] = array[randomIdx];\n    array[randomIdx] = tempValue;\n  }\n\n  return array;\n};\n\nfunction swap(i: number, j: number, array: Array<ArrayItem>) {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n\nexport const ELEMENT_COLOURS = {\n  DEFAULT: PRIMARY,\n  SORTED: SECONDARY,\n  FOCUSED: TERTIARY,\n};\n\nexport const createArrayItem = (value: number): ArrayItem => ({\n  value,\n  isSorted: false,\n  inProgress: false,\n  colour: PRIMARY,\n});\n\nexport const sleep = (duration: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(() => resolve(), duration));\n\nexport const bubbleSort = async (\n  array: Array<ArrayItem>,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  let isSorted = false;\n  let counter = 0;\n\n  while (!isSorted) {\n    isSorted = true;\n\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      let next = array[i + 1];\n      let current = array[i];\n      setColour(i, ELEMENT_COLOURS.FOCUSED, array);\n      setArray([...array]);\n\n      await sleep(MAX_SPEED - speed);\n\n      if (current.value > next.value) {\n        swap(i, i + 1, array);\n        setArray([...array]);\n\n        isSorted = false;\n      }\n\n      setColour(i, ELEMENT_COLOURS.DEFAULT, array);\n    }\n\n    counter++;\n    setColour(array.length - counter, ELEMENT_COLOURS.SORTED, array);\n    setArray([...array]);\n  }\n\n  setArray(array.map((w) => ({ ...w, colour: ELEMENT_COLOURS.SORTED })));\n};\n\nconst setColour = (index: number, colour: string, array: Array<ArrayItem>) => {\n  const element = array[index];\n\n  if (element) {\n    element.colour = colour;\n  }\n};\n\nexport const insertionSort = async (\n  array: Array<ArrayItem>,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  setColour(0, ELEMENT_COLOURS.SORTED, array);\n  setArray([...array]);\n\n  for (let i = 1; i < array.length; i++) {\n    let j = i;\n\n    setColour(j, ELEMENT_COLOURS.FOCUSED, array);\n    setArray([...array]);\n\n    while (j > 0 && array[j].value < array[j - 1].value) {\n      setColour(j, ELEMENT_COLOURS.FOCUSED, array);\n      setArray([...array]);\n      await sleep(MAX_SPEED - speed);\n      swap(j, j - 1, array);\n      setColour(j - 1, ELEMENT_COLOURS.SORTED, array);\n      setColour(j, ELEMENT_COLOURS.SORTED, array);\n      setArray([...array]);\n      j--;\n    }\n    setColour(i, ELEMENT_COLOURS.SORTED, array);\n    setArray([...array]);\n  }\n\n  setArray(array.map((w) => ({ ...w, isSorted: true })));\n};\n\nexport const selectionSort = async (\n  array: Array<ArrayItem>,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  let currentIdx = 0;\n\n  while (currentIdx < array.length - 1) {\n    let smallestIdx = currentIdx;\n    setColour(smallestIdx, ELEMENT_COLOURS.FOCUSED, array);\n    setArray([...array]);\n\n    for (let i = currentIdx + 1; i < array.length; i++) {\n      if (array[i].value < array[smallestIdx].value) {\n        setColour(smallestIdx, ELEMENT_COLOURS.DEFAULT, array);\n        setColour(i, ELEMENT_COLOURS.FOCUSED, array);\n        smallestIdx = i;\n        await sleep(MAX_SPEED - speed);\n        setArray([...array]);\n      }\n    }\n    swap(currentIdx, smallestIdx, array);\n    setColour(currentIdx, ELEMENT_COLOURS.SORTED, array);\n    setArray([...array]);\n    currentIdx++;\n  }\n\n  setArray(array.map((w) => ({ ...w, colour: ELEMENT_COLOURS.SORTED })));\n};\n","import * as S from \"./App.styles\";\n\nimport { ArrayItem, SortingAlgorithm } from \"./types\";\nimport { MAX_ARRAY_SIZE, MAX_SPEED } from \"./constants\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { bubbleSort, createArrayItem, insertionSort, selectionSort, shuffle } from \"./utils\";\n\nimport { Normalize } from \"styled-normalize\";\n\nconst App = () => {\n  const [array, setArray] = useState<Array<ArrayItem>>([]);\n  const [inProgress, setInProgress] = useState(false);\n  const [arraySize, setArraySize] = useState(50);\n  const [maxArraySize, setMaxArraySize] = useState(MAX_ARRAY_SIZE);\n  const [sortSpeed, setSortSpeed] = useState(Math.floor(MAX_SPEED / 2));\n  const [sortingAlgorithm, setSortingAlgorithm] = useState(\n    SortingAlgorithm.BubbleSort\n  );\n  const mainContentWidth = useRef(null);\n\n  useEffect(() => {\n    if (\n      mainContentWidth &&\n      mainContentWidth.current &&\n      // @ts-ignore\n      mainContentWidth.current.offsetWidth\n    ) {\n      const number =\n        // @ts-ignore\n        (mainContentWidth.current.offsetWidth - 80) /\n        (S.BAR_WIDTH + S.BAR_SPACE);\n      setMaxArraySize(Math.floor(number));\n    }\n  }, [mainContentWidth]);\n\n  useEffect(() => {\n    shuffleArray(arraySize);\n  }, [arraySize]);\n\n  const sortArray = async () => {\n    setInProgress(true);\n\n    switch (sortingAlgorithm) {\n      case SortingAlgorithm.BubbleSort:\n        await bubbleSort(array, setArray, sortSpeed);\n        break;\n      case SortingAlgorithm.SelectionSort:\n        await selectionSort(array, setArray, sortSpeed);\n        break;\n      case SortingAlgorithm.InsertionSort:\n        await insertionSort(array, setArray, sortSpeed);\n        break;\n    }\n\n    setInProgress(false);\n  };\n\n  const shuffleArray = async (arraySize: number) => {\n    const array: Array<ArrayItem> = Array.from({\n      length: arraySize,\n    }).map((_, i) => createArrayItem(i + 1));\n    const shuffled = shuffle(array);\n    setArray(shuffled);\n  };\n\n  const getAlgorithmDescription = () => {\n    switch (sortingAlgorithm) {\n      case SortingAlgorithm.BubbleSort:\n        return \"Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. O(n^2) average time complexity.\";\n      case SortingAlgorithm.InsertionSort:\n        return \"Insertion sort creates a sorted output list at the start of the array. At each iteration, insertion sort removes one element from the unsorted list, and traverses down the sorted list to find a location for the item. It repeats until no unsorted elements remain. O(n^2) average time complexity.\";\n      case SortingAlgorithm.SelectionSort:\n        return \"Selection sort splits the list in to a sorted list and an unsorted list. Initially, the sorted list is empty. The algorithm repeatedly iterates over the unsorted list, in each iteration storing the index of the smallest value. At the end of the iteration, the smallest value will be swapped with the first item in the unsorted list. O(n^2) average time complexity.\";\n    }\n  };\n\n  return (\n    <>\n      <Normalize />\n      <S.Wrapper>\n        <S.ToolBar>\n          <S.Select\n            value={sortingAlgorithm}\n            onChange={(event) => {\n              const {value} = event.target\n              const typedValue = value as SortingAlgorithm\n              shuffleArray(arraySize);\n              setSortingAlgorithm(typedValue);\n            }}\n            disabled={inProgress}\n          >\n            {Object.values(SortingAlgorithm).map(w => (<option key={w} value={w}>{w}</option>))}\n          </S.Select>\n          <S.SliderWrapper>\n            <S.SliderDescription>Array Size</S.SliderDescription>\n            <S.Slider\n              disabled={inProgress}\n              value={arraySize}\n              onChange={(val) => {\n                setArraySize(Number(val.target.value));\n              }}\n              type=\"range\"\n              min=\"20\"\n              max={maxArraySize}\n            />\n          </S.SliderWrapper>\n\n          <S.SliderWrapper>\n            <S.SliderDescription>Sort Speed</S.SliderDescription>\n            <S.Slider\n              disabled={inProgress}\n              value={sortSpeed}\n              onChange={(val) => {\n                setSortSpeed(Number(val.target.value));\n              }}\n              type=\"range\"\n              min=\"0\"\n              max={MAX_SPEED}\n            />\n          </S.SliderWrapper>\n          <S.Button\n            disabled={inProgress}\n            onClick={() => shuffleArray(arraySize)}\n          >\n            Shuffle\n          </S.Button>\n          <S.Button primary disabled={inProgress} onClick={sortArray}>\n            Sort\n          </S.Button>\n          <S.Credits>\n            Made by <S.Link href=\"https://twitter.com/seanbarryuk\" target=\"_new\" rel=\"noopener nofollow\">@SeanBarryUK</S.Link>\n          </S.Credits>\n        </S.ToolBar>\n        <S.Rows>\n          <S.ArrayWrapper ref={mainContentWidth}>\n            {array.map((w) => (\n              <S.ArrayElement key={w.value} element={w} />\n            ))}\n          </S.ArrayWrapper>\n          <S.Description>{getAlgorithmDescription()}</S.Description>\n        </S.Rows>\n      </S.Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}