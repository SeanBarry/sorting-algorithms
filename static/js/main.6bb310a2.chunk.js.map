{"version":3,"sources":["types.ts","App.styles.ts","constants.ts","utils.ts","algorithms/bubbleSort.ts","algorithms/insertionSort.ts","algorithms/quickSort.ts","algorithms/selectionSort.ts","App.tsx","reportWebVitals.js","index.js"],"names":["SortingAlgorithm","BACKGROUND","PRIMARY","SECONDARY","Div","styled","div","Wrapper","ArrayElement","element","value","colour","ToolBar","ArrayWrapper","Credits","p","Link","a","Button","button","primary","Select","select","SliderWrapper","SliderDescription","Slider","input","Rows","Description","MAX_SPEED","shuffle","array","tempValue","randomIdx","currentIndex","length","Math","floor","random","swap","i","j","temp","ELEMENT_COLOURS","sleep","duration","Promise","resolve","setTimeout","setColour","index","bubbleSort","setArray","speed","isSorted","counter","next","current","map","w","insertionSort","quickSort","quickSortHelper","startIdx","endIdx","timeToWait","leftIdx","rightIdx","pivotIdx","selectionSort","currentIdx","smallestIdx","App","useState","inProgress","setInProgress","arraySize","setArraySize","maxArraySize","setMaxArraySize","sortSpeed","setSortSpeed","BubbleSort","sortingAlgorithm","setSortingAlgorithm","mainContentWidth","useRef","useEffect","offsetWidth","number","shuffleArray","sortArray","SelectionSort","InsertionSort","QuickSort","Array","from","_","shuffled","isAlgoDisabled","key","MergeSort","HeapSort","RadixSort","BogoSort","ref","getAlgorithmDescription","onChange","event","typedValue","target","disabled","Object","values","val","Number","type","min","max","onClick","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6bb310a2.chunk.js","sourcesContent":["export enum SortingAlgorithm {\n  BubbleSort = \"Bubble Sort\",\n  InsertionSort = \"Insertion Sort\",\n  SelectionSort = \"Selection Sort\",\n  QuickSort = \"Quick Sort\",\n  MergeSort = \"Merge Sort (Coming soon)\",\n  HeapSort = \"Heap Sort (Coming soon)\",\n  RadixSort = \"Radix Sort (Coming soon)\",\n  BogoSort = \"Bogo Sort (Coming soon)\",\n}\n\nexport type ArrayItem = {\n  value: number;\n  colour: string;\n};\n","import { ArrayItem } from \"./types\";\nimport styled from \"styled-components\";\n\nexport const BACKGROUND = \"#fffffe\";\nexport const BACKGROUND_SECONDARY = \"#232946\";\nexport const PRIMARY = \"#3da9fc\";\nexport const SECONDARY = \"#ef4565\";\nexport const TERTIARY = \"#ffc107\";\n\nexport const BAR_WIDTH = 4;\nexport const BAR_SPACE = 4;\n\nconst Div = styled.div`\n  box-sizing: border-box;\n`;\n\nexport const Wrapper = styled(Div)`\n  width: 100%;\n  height: 100%;\n  background-color: ${BACKGROUND};\n  display: flex;\n\n  @media (min-width: 768px) {\n    flex-direction: row-reverse;\n  }\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n  }\n`;\n\ntype ArrayItemProps = {\n  key: number;\n  element: ArrayItem;\n};\n\nexport const ArrayElement = styled.div<ArrayItemProps>`\n  width: ${BAR_WIDTH}px;\n  margin-left: ${BAR_SPACE}px;\n  color: transparent;\n  display: inline-block;\n  height: ${({ element }) => element.value * 3}px;\n  background-color: ${({ element }) => element.colour};\n`;\n\nexport const ToolBar = styled(Div)`\n  background: ${BACKGROUND_SECONDARY};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 30px;\n  height: 100%;\n  width: 250px;\n  border-right: 3px solid rgb(9 64 103);\n  flex-direction: column;\n\n  @media (max-width: 768px) {\n    border-right: none;\n    width: 100%;\n  }\n`;\n\nexport const ArrayWrapper = styled(Div)`\n  padding: 30px;\n  width: 100%;\n  height: 100%;\n  background-color: ${BACKGROUND};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Credits = styled.p`\n  font-family: sans-serif;\n  font-size: 12px;\n  color: #fff;\n`;\n\nexport const Link = styled.a`\n  color: ${SECONDARY};\n  font-weight: bold;\n  text-decoration: none;\n\n  &:hover,\n  &:focus,\n  &:active {\n    color: #bc2944;\n  }\n`;\n\nexport const Button = styled.button<{ primary?: boolean }>`\n  background: ${({ primary }) => (primary ? SECONDARY : BACKGROUND)};\n  width: 100%;\n  border: none;\n  padding: 1rem 2rem;\n  margin: 10px 0;\n  text-decoration: none;\n  color: ${({ primary }) => (primary ? \"#fff\" : \"#2b2c34\")};\n  font-family: sans-serif;\n  font-size: 1rem;\n  font-weight: bold;\n  line-height: 1;\n\n  cursor: pointer;\n  text-align: center;\n  transition: background 250ms ease-in-out, transform 150ms ease;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n\n  &:disabled {\n    cursor: not-allowed;\n    opacity: 0.7;\n  }\n\n  &:hover {\n    background: ${({ primary }) => (primary ? \"#bc2944\" : \"#cfcfcf\")};\n  }\n`;\n\nexport const Select = styled.select`\n  width: 100%;\n  font-family: sans-serif;\n  font-size: 1rem;\n  font-weight: bold;\n  line-height: 1;\n  padding: 15px 0px;\n  margin: 10px 0px;\n  text-align: center;\n\n  &:disabled {\n    cursor: not-allowed;\n  }\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const SliderWrapper = styled(Div)`\n  padding: 10px 0px;\n  width: 100%;\n`;\n\nexport const SliderDescription = styled.p`\n  font-family: sans-serif;\n  color: #fffffe;\n  font-size: 1rem;\n  font-weight: bold;\n  line-height: 1;\n  margin: 0px;\n`;\n\nexport const Slider = styled.input`\n  margin: 10px 0;\n  height: 25px;\n  -webkit-transition: 0.2s;\n  transition: opacity 0.2s;\n  -webkit-appearance: none;\n  width: 100%;\n\n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 25px;\n    height: 25px;\n    background: ${SECONDARY};\n    cursor: pointer;\n\n    &:disabled {\n      opacity: 0.7;\n      cursor: not-allowed;\n    }\n  }\n\n  &:focus {\n    outline: none;\n  }\n\n  &:disabled {\n    opacity: 0.7;\n    background: white;\n    cursor: not-allowed;\n  }\n`;\n\nexport const Rows = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Description = styled.div`\n  font-size: 16px;\n  font-family: sans-serif;\n  line-height: 1.8;\n  padding: 30px;\n  align-self: flex-start;\n  justify-content: center;\n`;\n","export const MAX_SPEED = 400;\nexport const MAX_ARRAY_SIZE = 100;\n","import { PRIMARY, SECONDARY, TERTIARY } from \"./App.styles\";\n\nimport { ArrayItem } from \"./types\";\n\nexport const shuffle = (array: Array<any>) => {\n  let currentIndex = array.length;\n  let tempValue;\n  let randomIdx;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIdx = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    tempValue = array[currentIndex];\n    array[currentIndex] = array[randomIdx];\n    array[randomIdx] = tempValue;\n  }\n\n  return array;\n};\n\nexport const swap = (i: number, j: number, array: Array<ArrayItem>) => {\n  const temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n};\n\nexport const ELEMENT_COLOURS = {\n  DEFAULT: PRIMARY,\n  SORTED: SECONDARY,\n  FOCUSED: TERTIARY,\n};\n\nexport const createArrayItem = (value: number): ArrayItem => ({\n  value,\n  colour: PRIMARY,\n});\n\nexport const sleep = (duration: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(() => resolve(), duration));\n\nexport const setColour = (\n  index: number,\n  colour: string,\n  array: Array<ArrayItem>\n) => {\n  const element = array[index];\n\n  if (element) {\n    element.colour = colour;\n  }\n};\n","import { ELEMENT_COLOURS, setColour, sleep, swap } from \"../utils\";\n\nimport { ArrayItem } from \"../types\";\nimport { MAX_SPEED } from \"../constants\";\n\nexport const bubbleSort = async (\n  array: Array<ArrayItem>,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  let isSorted = false;\n  let counter = 0;\n\n  while (!isSorted) {\n    isSorted = true;\n\n    for (let i = 0; i < array.length - 1 - counter; i++) {\n      let next = array[i + 1];\n      let current = array[i];\n      setColour(i, ELEMENT_COLOURS.FOCUSED, array);\n      setArray([...array]);\n\n      await sleep(MAX_SPEED - speed);\n\n      if (current.value > next.value) {\n        swap(i, i + 1, array);\n        setArray([...array]);\n\n        isSorted = false;\n      }\n\n      setColour(i, ELEMENT_COLOURS.DEFAULT, array);\n    }\n\n    counter++;\n    setColour(array.length - counter, ELEMENT_COLOURS.SORTED, array);\n    setArray([...array]);\n  }\n\n  setArray(array.map((w) => ({ ...w, colour: ELEMENT_COLOURS.SORTED })));\n};\n","import { ELEMENT_COLOURS, setColour, sleep, swap } from \"../utils\";\n\nimport { ArrayItem } from \"../types\";\nimport { MAX_SPEED } from \"../constants\";\n\nexport const insertionSort = async (\n  array: Array<ArrayItem>,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  setColour(0, ELEMENT_COLOURS.SORTED, array);\n  setArray([...array]);\n\n  for (let i = 1; i < array.length; i++) {\n    let j = i;\n\n    setColour(j, ELEMENT_COLOURS.FOCUSED, array);\n    setArray([...array]);\n\n    while (j > 0 && array[j].value < array[j - 1].value) {\n      setColour(j, ELEMENT_COLOURS.FOCUSED, array);\n      setArray([...array]);\n      await sleep(MAX_SPEED - speed);\n      swap(j, j - 1, array);\n      setColour(j - 1, ELEMENT_COLOURS.SORTED, array);\n      setColour(j, ELEMENT_COLOURS.SORTED, array);\n      setArray([...array]);\n      j--;\n    }\n    setColour(i, ELEMENT_COLOURS.SORTED, array);\n    setArray([...array]);\n  }\n\n  setArray(array.map((w) => ({ ...w, colour: ELEMENT_COLOURS.SORTED })));\n};\n","import { ELEMENT_COLOURS, setColour, sleep, swap } from \"../utils\";\n\nimport { ArrayItem } from \"../types\";\nimport { MAX_SPEED } from \"../constants\";\n\nexport const quickSort = async (\n  array: Array<ArrayItem>,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  await quickSortHelper(array, 0, array.length - 1, setArray, speed);\n\n  setArray(array.map((w) => ({ ...w, colour: ELEMENT_COLOURS.SORTED })));\n};\n\nconst quickSortHelper = async (\n  array: Array<ArrayItem>,\n  startIdx: number,\n  endIdx: number,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  if (startIdx >= endIdx) {\n    return;\n  }\n\n  const timeToWait = Math.floor((MAX_SPEED - speed) / 4);\n\n  let pivotIdx = startIdx;\n  let leftIdx = startIdx + 1;\n  let rightIdx = endIdx;\n\n  setColour(pivotIdx, ELEMENT_COLOURS.FOCUSED, array);\n  setColour(leftIdx, ELEMENT_COLOURS.FOCUSED, array);\n  setColour(rightIdx, ELEMENT_COLOURS.FOCUSED, array);\n  setArray([...array]);\n\n  await sleep(timeToWait);\n\n  while (rightIdx >= leftIdx) {\n    if (\n      array[leftIdx].value > array[pivotIdx].value &&\n      array[rightIdx].value < array[pivotIdx].value\n    ) {\n      swap(leftIdx, rightIdx, array);\n      setArray([...array]);\n      await sleep(timeToWait);\n    }\n\n    if (array[leftIdx].value <= array[pivotIdx].value) {\n      setColour(leftIdx, ELEMENT_COLOURS.DEFAULT, array);\n      setColour(leftIdx + 1, ELEMENT_COLOURS.FOCUSED, array);\n      setArray([...array]);\n      await sleep(timeToWait);\n      leftIdx += 1;\n    }\n\n    if (array[rightIdx].value >= array[pivotIdx].value) {\n      setColour(rightIdx, ELEMENT_COLOURS.DEFAULT, array);\n      setColour(rightIdx - 1, ELEMENT_COLOURS.FOCUSED, array);\n      setArray([...array]);\n      await sleep(timeToWait);\n      rightIdx -= 1;\n    }\n  }\n\n  swap(pivotIdx, rightIdx, array);\n  setColour(rightIdx, ELEMENT_COLOURS.SORTED, array);\n  setColour(pivotIdx, ELEMENT_COLOURS.SORTED, array);\n  setColour(leftIdx, ELEMENT_COLOURS.SORTED, array);\n  setArray([...array]);\n  await sleep(timeToWait);\n\n  let leftSubArrayIsSmaller = rightIdx - 1 - startIdx < endIdx - (rightIdx + 1);\n\n  if (leftSubArrayIsSmaller) {\n    await quickSortHelper(array, startIdx, rightIdx - 1, setArray, speed);\n    await quickSortHelper(array, rightIdx + 1, endIdx, setArray, speed);\n  } else {\n    await quickSortHelper(array, rightIdx + 1, endIdx, setArray, speed);\n    await quickSortHelper(array, startIdx, rightIdx - 1, setArray, speed);\n  }\n};\n","import { ELEMENT_COLOURS, setColour, sleep, swap } from \"../utils\";\n\nimport { ArrayItem } from \"../types\";\nimport { MAX_SPEED } from \"../constants\";\n\nexport const selectionSort = async (\n  array: Array<ArrayItem>,\n  setArray: (array: Array<ArrayItem>) => void,\n  speed: number\n) => {\n  let currentIdx = 0;\n\n  while (currentIdx < array.length - 1) {\n    let smallestIdx = currentIdx;\n    setColour(smallestIdx, ELEMENT_COLOURS.FOCUSED, array);\n    setArray([...array]);\n\n    for (let i = currentIdx + 1; i < array.length; i++) {\n      if (array[i].value < array[smallestIdx].value) {\n        setColour(smallestIdx, ELEMENT_COLOURS.DEFAULT, array);\n        setColour(i, ELEMENT_COLOURS.FOCUSED, array);\n        smallestIdx = i;\n        await sleep(MAX_SPEED - speed);\n        setArray([...array]);\n      }\n    }\n    swap(currentIdx, smallestIdx, array);\n    setColour(currentIdx, ELEMENT_COLOURS.SORTED, array);\n    setArray([...array]);\n    currentIdx++;\n  }\n\n  setArray(array.map((w) => ({ ...w, colour: ELEMENT_COLOURS.SORTED })));\n};\n","import * as S from \"./App.styles\";\n\nimport { ArrayItem, SortingAlgorithm } from \"./types\";\nimport { MAX_ARRAY_SIZE, MAX_SPEED } from \"./constants\";\nimport {\n  bubbleSort,\n  insertionSort,\n  quickSort,\n  selectionSort,\n} from \"./algorithms\";\nimport { createArrayItem, shuffle } from \"./utils\";\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { Normalize } from \"styled-normalize\";\n\nconst App = () => {\n  const [array, setArray] = useState<Array<ArrayItem>>([]);\n  const [inProgress, setInProgress] = useState(false);\n  const [arraySize, setArraySize] = useState(50);\n  const [maxArraySize, setMaxArraySize] = useState(MAX_ARRAY_SIZE);\n  const [sortSpeed, setSortSpeed] = useState(Math.floor(MAX_SPEED / 2));\n  const [sortingAlgorithm, setSortingAlgorithm] = useState(\n    SortingAlgorithm.BubbleSort\n  );\n  const mainContentWidth = useRef(null);\n\n  useEffect(() => {\n    if (\n      mainContentWidth &&\n      mainContentWidth.current &&\n      // @ts-ignore\n      mainContentWidth.current.offsetWidth\n    ) {\n      const number =\n        // @ts-ignore\n        (mainContentWidth.current.offsetWidth - 80) /\n        (S.BAR_WIDTH + S.BAR_SPACE);\n      setMaxArraySize(Math.floor(number));\n    }\n  }, [mainContentWidth]);\n\n  useEffect(() => {\n    shuffleArray(arraySize);\n  }, [arraySize]);\n\n  const sortArray = async () => {\n    setInProgress(true);\n\n    switch (sortingAlgorithm) {\n      case SortingAlgorithm.BubbleSort:\n        await bubbleSort(array, setArray, sortSpeed);\n        break;\n      case SortingAlgorithm.SelectionSort:\n        await selectionSort(array, setArray, sortSpeed);\n        break;\n      case SortingAlgorithm.InsertionSort:\n        await insertionSort(array, setArray, sortSpeed);\n        break;\n      case SortingAlgorithm.QuickSort:\n        await quickSort(array, setArray, sortSpeed);\n        break;\n    }\n\n    setInProgress(false);\n  };\n\n  const shuffleArray = async (arraySize: number) => {\n    const array: Array<ArrayItem> = Array.from({\n      length: arraySize,\n    }).map((_, i) => createArrayItem(i + 1));\n    const shuffled = shuffle(array);\n    setArray(shuffled);\n  };\n\n  const getAlgorithmDescription = () => {\n    switch (sortingAlgorithm) {\n      case SortingAlgorithm.BubbleSort:\n        return (\n          <>\n            <p>\n              <strong>Bubble Sort - O(N^2) average time complexity.</strong>\n            </p>\n            <p>\n              Bubble sort repeatedly iterates over a list from left to right. At\n              each value a comparison is made - if the current value is greater\n              than the next value, their positions are swapped. This results in\n              the largest value moving to the end of the unsorted list in each\n              iteration.\n            </p>\n          </>\n        );\n      case SortingAlgorithm.InsertionSort:\n        return (\n          <>\n            <p>\n              <strong>Insertion Sort - O(N^2) average time complexity.</strong>\n            </p>\n            <p>\n              Insertion sort designates a sorted output list at the start of the\n              list. To begin with this is just the first value in the unsorted\n              list. The algorithm then iterates over the unsorted list. At each\n              iteration, it removes one element from the list, and traverses\n              down the sorted list to find a location for the item. It repeats,\n              building up a sorted list of values on the left hand side, until\n              no unsorted elements remain.\n            </p>\n          </>\n        );\n      case SortingAlgorithm.SelectionSort:\n        return (\n          <>\n            <p>\n              <strong>Selection Sort - O(N^2) average time complexity.</strong>\n            </p>\n            <p>\n              Selection sort splits the list in to a sorted list and an unsorted\n              list. Initially, the sorted list is empty. The algorithm\n              repeatedly iterates over the unsorted list, in each iteration\n              storing the index of the smallest value. At the end of the\n              iteration, the smallest value will be swapped with the first item\n              in the unsorted list. This builds up a sorted list of ascending\n              value on the left hand side.\n            </p>\n          </>\n        );\n      case SortingAlgorithm.QuickSort:\n        return (\n          <>\n            <p>\n              <strong>\n                Quick Sort - O(N(log(N))) average time complexity.\n              </strong>\n            </p>\n            <p>\n              Quick sort creates a pivot index in the list. In this example, the\n              pivot is always the first element. It then iterates over the list,\n              reodering elements by swapping the positions of elements that have\n              a lower value than the pivot with values that are greater than the\n              pivot's value. Eventually a point is reached where all values\n              before are less than the pivot, and all values after are greater\n              than the pivot. The pivot then swaps positions to this point, and\n              it is in its final sorted position. The algorithm is then\n              recursively applied to both remaining lists on each side of the\n              pivot, beginning with whichever is the smallest.\n            </p>\n          </>\n        );\n    }\n  };\n\n  const isAlgoDisabled = (key: SortingAlgorithm) => {\n    switch (key) {\n      case SortingAlgorithm.MergeSort:\n      case SortingAlgorithm.HeapSort:\n      case SortingAlgorithm.RadixSort:\n      case SortingAlgorithm.BogoSort:\n        return true;\n      default:\n        return false;\n    }\n  };\n\n  return (\n    <>\n      <Normalize />\n      <S.Wrapper>\n        <S.Rows>\n          <S.ArrayWrapper ref={mainContentWidth}>\n            {array.map((w) => (\n              <S.ArrayElement key={w.value} element={w} />\n            ))}\n          </S.ArrayWrapper>\n          <S.Description>{getAlgorithmDescription()}</S.Description>\n        </S.Rows>\n        <S.ToolBar>\n          <S.Select\n            value={sortingAlgorithm}\n            onChange={(event) => {\n              const { value } = event.target;\n              const typedValue = value as SortingAlgorithm;\n              shuffleArray(arraySize);\n              setSortingAlgorithm(typedValue);\n            }}\n            disabled={inProgress}\n          >\n            {Object.values(SortingAlgorithm).map((value) => (\n              <option\n                key={value}\n                value={value}\n                disabled={isAlgoDisabled(value)}\n              >\n                {value}\n              </option>\n            ))}\n          </S.Select>\n          <S.SliderWrapper>\n            <S.SliderDescription>Array Size</S.SliderDescription>\n            <S.Slider\n              disabled={inProgress}\n              value={arraySize}\n              onChange={(val) => {\n                setArraySize(Number(val.target.value));\n              }}\n              type=\"range\"\n              min=\"20\"\n              max={maxArraySize}\n            />\n          </S.SliderWrapper>\n\n          <S.SliderWrapper>\n            <S.SliderDescription>Sort Speed</S.SliderDescription>\n            <S.Slider\n              disabled={inProgress}\n              value={sortSpeed}\n              onChange={(val) => {\n                setSortSpeed(Number(val.target.value));\n              }}\n              type=\"range\"\n              min=\"0\"\n              max={MAX_SPEED}\n            />\n          </S.SliderWrapper>\n          <S.Button\n            disabled={inProgress}\n            onClick={() => shuffleArray(arraySize)}\n          >\n            Shuffle\n          </S.Button>\n          <S.Button primary disabled={inProgress} onClick={sortArray}>\n            Sort\n          </S.Button>\n          <S.Credits>\n            Made by{\" \"}\n            <S.Link\n              href=\"https://twitter.com/seanbarryuk\"\n              target=\"_new\"\n              rel=\"noopener nofollow\"\n            >\n              @SeanBarryUK\n            </S.Link>\n          </S.Credits>\n        </S.ToolBar>\n      </S.Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import App from \"./App\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}